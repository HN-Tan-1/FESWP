import React, { useState, useEffect } from 'react';
import './ManagerStaffManage.css';
import axios from 'axios';

const PAGE_SIZE = 3;

const ManagerStaffManage = () => {
  const [staffs, setStaffs] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);

  // G·ªçi API l·∫•y danh s√°ch nh√¢n vi√™n
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return;

    axios.get('http://localhost:8080/api/auth/manager/staffs', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
      .then(res => {
        setStaffs(res.data || []);
      })
      .catch(err => {
        console.error('‚ùå L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:', err);
      });
  }, []);

  const totalPages = Math.ceil(staffs.length / PAGE_SIZE);
  const currentStaffs = staffs.slice(
    (currentPage - 1) * PAGE_SIZE,
    currentPage * PAGE_SIZE
  );

  const handleView = (staff) => {
    alert(`üîç Xem chi ti·∫øt nh√¢n vi√™n:\n\nT√™n: ${staff.name}\nEmail: ${staff.email}\nSƒêT: ${staff.phone}`);
  };

  const handleEdit = (staff) => {
    alert(`‚úèÔ∏è B·∫°n ƒëang s·ª≠a th√¥ng tin c·ªßa: ${staff.name}`);
  };

  const handleDelete = async (staff) => {
    const token = localStorage.getItem('token');
    if (!token) {
      alert("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    if (!window.confirm(`‚ùóB·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${staff.name}"?`)) return;

    try {
      const response = await fetch(`http://localhost:8080/api/auth/manager/staffs/${staff.id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': '*/*'
        }
      });

      if (!response.ok) throw new Error(`L·ªói khi x√≥a: ${response.status}`);

      alert(`üóëÔ∏è ƒê√£ x√≥a nh√¢n vi√™n: ${staff.name}`);
      setStaffs(prev => prev.filter(s => s.id !== staff.id));

    } catch (err) {
      console.error(err);
      alert('üö´ Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  return (
    <div className="smh-container">
      {/* ---------- HEADER ---------- */}
      <div className="smh-header-row">
        <div className="smh-header-text">
          <h1 className="smh-title">Qu·∫£n l√Ω nh√¢n vi√™n</h1>
          <p className="smh-subtitle">Qu·∫£n l√Ω th√¥ng tin v√† ph√¢n quy·ªÅn nh√¢n vi√™n</p>
        </div>
        <div className="smh-top-right-buttons">
          <button className="smh-add-btn">Th√™m nh√¢n vi√™n m·ªõi</button>
        </div>
      </div>

      {/* ---------- TABLE ---------- */}
      <div className="stm-page">
        <div className="stm-title">Danh s√°ch nh√¢n vi√™n ({staffs.length})</div>
        <div className="stm-table">
          <div className="stm-table-head">
            <div>Th√¥ng tin nh√¢n vi√™n</div>
            <div>Li√™n h·ªá</div>
            <div>Tr·∫°ng th√°i</div>
            <div>Thao t√°c</div>
          </div>
          {currentStaffs.map(staff => (
            <div className="stm-table-row" key={staff.id}>
              <div>
                <strong>{staff.name}</strong>
                <span>ID: {staff.id}</span>
                <span>
                  Ng√†y t·∫°o: {staff.createdAt ? new Date(staff.createdAt).toLocaleDateString() : ''}
                </span>
              </div>
              <div>
                <span>{staff.email}</span>
                <span>{staff.phone}</span>
              </div>
              <div>
                <span className={`stm-status ${staff.active ? 'active' : 'inactive'}`}>
                  {staff.active ? 'ƒêang ho·∫°t ƒë·ªông' : 'T·∫°m ng∆∞ng'}
                </span>
              </div>
              <div className="stm-action-buttons">
                <button className="stm-view-btn" onClick={() => handleView(staff)}>Xem</button>
                <button className="stm-edit-btn" onClick={() => handleEdit(staff)}>S·ª≠a</button>
                <button className="stm-delete-btn" onClick={() => handleDelete(staff)}>X√≥a</button>
              </div>
            </div>
          ))}
        </div>

        {/* ---------- PAGINATION ---------- */}
        <div className="stm-pagination">
          <button
            onClick={() => setCurrentPage(p => Math.max(p - 1, 1))}
            disabled={currentPage === 1}
          >
            &lt; Tr∆∞·ªõc
          </button>
          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i + 1}
              className={currentPage === i + 1 ? 'active' : ''}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </button>
          ))}
          <button
            onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))}
            disabled={currentPage === totalPages}
          >
            Sau &gt;
          </button>
        </div>
      </div>
    </div>
  );
};

export default ManagerStaffManage;
