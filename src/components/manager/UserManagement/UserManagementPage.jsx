import React, { useState, useEffect } from 'react';
import './UserManagementPage.css';
import axios from 'axios';

const PAGE_SIZE = 3;

const UserManagementPage = () => {
  const [usersData, setUsersData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return;

    axios.get('http://localhost:8080/api/auth/manager/customers', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
      .then(res => {
        setUsersData(res.data || []);
      })
      .catch(err => {
        console.error('‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:', err);
      });
  }, []);

  const totalPages = Math.ceil(usersData.length / PAGE_SIZE);
  const currentUsers = usersData.slice(
    (currentPage - 1) * PAGE_SIZE,
    currentPage * PAGE_SIZE
  );

  const handleView = (user) => {
    alert(`üîç Xem chi ti·∫øt ng∆∞·ªùi d√πng:\n\nT√™n: ${user.name}\nEmail: ${user.email}\nSƒêT: ${user.phone}`);
  };

  const handleEdit = (user) => {
    alert(`‚úèÔ∏è B·∫°n ƒëang s·ª≠a th√¥ng tin c·ªßa: ${user.name}`);
  };

  const handleDelete = async (user) => {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    if (!window.confirm(`‚ùóB·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${user.name}"?`)) return;

    try {
      const response = await fetch(`http://localhost:8080/api/auth/manager/customers/${user.id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': '*/*'
        }
      });

      if (!response.ok) {
        throw new Error(`L·ªói khi x√≥a: ${response.status}`);
      }

      alert(`üóëÔ∏è ƒê√£ x√≥a ng∆∞·ªùi d√πng: ${user.name}`);
      setUsersData(prev => prev.filter(u => u.id !== user.id));

    } catch (err) {
      console.error(err);
      alert('üö´ Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  return (
    <div className="um-container">
      {/* --------- HEADER --------- */}
      <div className="um-header-row">
        <div className="um-header-text">
          <h1 className="um-title">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h1>
          <p className="um-subtitle">Qu·∫£n l√Ω t√†i kho·∫£n kh√°ch h√†ng</p>
        </div>
        <div className="um-top-right-buttons">
          <button className="um-user-add-btn">Th√™m ng∆∞·ªùi d√πng m·ªõi</button>
        </div>
      </div>

      {/* --------- TABLE --------- */}
      <div className="um-user-page">
        <div className="um-user-title">Danh s√°ch ng∆∞·ªùi d√πng ({usersData.length})</div>
        <div className="um-user-table">
          <div className="um-table-head">
            <div>Th√¥ng tin ng∆∞·ªùi d√πng</div>
            <div>Li√™n h·ªá</div>
            <div>Tr·∫°ng th√°i</div>
            <div>Thao t√°c</div>
          </div>
          {currentUsers.map(user => (
            <div className="um-table-row" key={user.id}>
              <div>
                <strong>{user.name}</strong>
                <span>ID: {user.id}</span>
                <span>
                  ƒêƒÉng k√Ω: {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : ''}
                </span>
              </div>
              <div>
                <span>{user.email}</span>
                <span>{user.phone}</span>
              </div>
              <div>
                <span className={`um-status ${user.verifiedStatus === 'ƒê√£ x√°c th·ª±c' ? 'active' : 'inactive'}`}>
                  {user.verifiedStatus}
                </span>
              </div>
              <div className="um-action-buttons">
                <button className="um-view-btn" onClick={() => handleView(user)}>Xem</button>
                <button className="um-edit-btn" onClick={() => handleEdit(user)}>S·ª≠a</button>
                <button className="um-delete-btn" onClick={() => handleDelete(user)}>X√≥a</button>
              </div>
            </div>
          ))}
        </div>

        <div className="um-pagination">
          <button
            onClick={() => setCurrentPage(p => Math.max(p - 1, 1))}
            disabled={currentPage === 1}
          >
            &lt; Tr∆∞·ªõc
          </button>
          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i + 1}
              className={currentPage === i + 1 ? 'active' : ''}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </button>
          ))}
          <button
            onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))}
            disabled={currentPage === totalPages}
          >
            Sau &gt;
          </button>
        </div>
      </div>
    </div>
  );
};

export default UserManagementPage;
