import { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "./MSFooter.css";

const MSFooter = ({ searchKeyword, statusFilter, categoryFilter }) => {
  const navigate = useNavigate();
  const [services, setServices] = useState([]);
  const [page, setPage] = useState(1);
  const itemsPerPage = 3;

  // G·ªçi API l·∫•y danh s√°ch d·ªãch v·ª• do staff t·∫°o
  useEffect(() => {
    axios
      .get("http://localhost:8080/api/auth/staff/services/my", {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      })
      .then((res) => setServices(res.data))
      .catch((err) => console.error("L·ªói khi t·∫£i d·ªãch v·ª•:", err));
  }, []);

  // L·ªçc d·ªãch v·ª• theo t·ª´ kh√≥a, tr·∫°ng th√°i, danh m·ª•c
  const filteredServices = services
    .filter((service) => service && service.name)
    .filter((service) => {
      const matchKeyword = searchKeyword
        ? service.name.toLowerCase().includes(searchKeyword.toLowerCase())
        : true;
      const matchStatus = statusFilter ? service.status === statusFilter : true;
      const matchCategory = categoryFilter ? service.categoryName === categoryFilter : true;
      return matchKeyword && matchStatus && matchCategory;
    });

  const totalPages = Math.ceil(filteredServices.length / itemsPerPage);
  const visibleServices = filteredServices.slice(
    (page - 1) * itemsPerPage,
    page * itemsPerPage
  );

  // Xem chi ti·∫øt d·ªãch v·ª•
  const handleView = (service) => {
    navigate(`/staff/services/${service.id}`);
  };

  // S·ª≠a d·ªãch v·ª•
  const handleEdit = (service) => {
    navigate(`/staff/services/edit/${service.id}`);
  };

  // X√≥a d·ªãch v·ª•
  const handleDelete = async (service) => {
    if (window.confirm(`‚ùå B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªãch v·ª• "${service.name}"?`)) {
      try {
        await axios.delete(`http://localhost:8080/api/auth/staff/services/${service.id}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        setServices((prev) => prev.filter((s) => s.id !== service.id));
        alert(`üóëÔ∏è ƒê√£ x√≥a d·ªãch v·ª•: ${service.name}`);
      } catch (err) {
        console.error("L·ªói khi x√≥a d·ªãch v·ª•:", err);
        alert("‚ùå X√≥a th·∫•t b·∫°i!");
      }
    }
  };

  // CSS badge theo tr·∫°ng th√°i
  const getStatusClass = (status) => {
    switch (status) {
      case "ACTIVE":
      case "ƒêang ho·∫°t ƒë·ªông":
        return "ms-badge green";
      case "REJECTED":
      case "B·ªã t·ª´ ch·ªëi":
        return "ms-badge red";
      case "PENDING":
      case "Ch·ªù duy·ªát":
        return "ms-badge gray";
      default:
        return "ms-badge";
    }
  };

  return (
    <div className="ms-table-container">
      <h2>Danh s√°ch d·ªãch v·ª• ({filteredServices.length})</h2>
      <table className="ms-table">
        <thead>
          <tr>
            <th>D·ªäCH V·ª§</th>
            <th>GI√Å</th>
            <th>DANH M·ª§C</th>
            <th>TR·∫†NG TH√ÅI</th>
            <th>NG√ÄY T·∫†O</th>
            <th>THAO T√ÅC</th>
          </tr>
        </thead>
        <tbody>
          {visibleServices.map((service) => (
            <tr key={service.id}>
              <td>
                <strong>{service.name}</strong>
                <div className="ms-meta">ID: {service.id}</div>
              </td>
              <td>{service.price?.toLocaleString()} VND</td>
              <td>
                <span className="ms-badge gray">{service.categoryName}</span>
              </td>
              <td>
                <span className={getStatusClass(service.status)}>
                  {service.status}
                </span>
              </td>
              <td>
                {new Date(service.createdAt).toLocaleDateString() || "Ch∆∞a l√™n l·ªãch"}
              </td>
              <td>
                <div className="ms-actions">
                  <button className="ms-view-btn" onClick={() => handleView(service)}>
                    Xem
                  </button>
                  <button className="ms-edit-btn" onClick={() => handleEdit(service)}>
                    S·ª≠a
                  </button>
                  <button className="ms-delete-btn" onClick={() => handleDelete(service)}>
                    X√≥a
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="ms-pagination">
        <button onClick={() => setPage(page - 1)} disabled={page === 1}>
          ‚Äπ Tr∆∞·ªõc
        </button>
        {[...Array(totalPages)].map((_, idx) => {
          const p = idx + 1;
          return (
            <button
              key={p}
              className={page === p ? "active" : ""}
              onClick={() => setPage(p)}
            >
              {p}
            </button>
          );
        })}
        <button onClick={() => setPage(page + 1)} disabled={page === totalPages}>
          Sau ‚Ä∫
        </button>
      </div>
    </div>
  );
};

export default MSFooter;
