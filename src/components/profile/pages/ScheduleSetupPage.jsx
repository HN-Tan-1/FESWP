import React, { useState, useEffect } from "react";
import axios from "axios";
import "./ScheduleSetupPage.css";

const ScheduleCard = ({ schedule }) => (
    <div className="schedule-card">
        <div className="schedule-card-header">
            <span className="badge">
                üìÖ {schedule.type} - {schedule.dayOfWeek}
            </span>
        </div>
        <div className="schedule-card-body">
            <p>‚è∞ {schedule.startTime?.substring(11, 16)} - {schedule.endTime?.substring(11, 16)}</p>
            <p>üíµ {schedule.price?.toLocaleString()} ƒë / {schedule.durationMinutes} ph√∫t</p>
            {schedule.note && <p className="note">üìù {schedule.note}</p>}
            <span className={`status ${schedule.isAvailable ? "available" : "not-available"}`}>
                {schedule.isAvailable ? "C√≥ th·ªÉ ƒë·∫∑t l·ªãch" : "ƒê√£ k√≠n"}
            </span>
        </div>
    </div>
);

const ScheduleSetupPage = () => {
    const consultantId = 1;

    const [schedules, setSchedules] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [form, setForm] = useState({
        type: "HANG_TUAN",
        dayOfWeek: "THU_HAI",
        startTime: "09:00",
        endTime: "17:00",
        price: 0,
        durationMinutes: 60,
        note: "",
        isAvailable: true,
    });

    const createSchedule = async (scheduleData) => {
        try {
            const res = await axios.post(
                "http://localhost:8080/api/auth/schedules",
                scheduleData
            );
            return res.data;
        } catch (err) {
            alert("‚ùå Kh√¥ng th·ªÉ t·∫°o l·ªãch m·ªõi. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.");
            console.error("L·ªói t·∫°o l·ªãch:", err);
            throw err;
        }
    };

    const getSchedulesByConsultant = async (consultantId) => {
        try {
            const res = await axios.get(
                `http://localhost:8080/api/auth/schedules/consultant/${consultantId}`
            );
            if (res.status === 204) return [];
            return res.data;
        } catch (err) {
            console.error("L·ªói khi l·∫•y l·ªãch:", err);
            return [];
        }
    };

    const loadSchedules = async () => {
        const data = await getSchedulesByConsultant(consultantId);
        setSchedules(data);
    };

    const handleSave = async () => {
        const today = new Date().toISOString().split("T")[0]; // "2025-07-23"
        const startDateTime = `${today}T${form.startTime}:00`;
        const endDateTime = `${today}T${form.endTime}:00`;

        const payload = {
            ...form,
            startTime: startDateTime,
            endTime: endDateTime,
            consultantId,
        };

        console.log("Sending schedule:", payload);
        await createSchedule(payload);
        setShowModal(false);
        loadSchedules();
    };

    useEffect(() => {
        loadSchedules();
    }, []);

    return (
        <div className="schedule-wrapper">
            <div className="header">
                <h2>üìÖ L·ªãch h·∫πn l√†m vi·ªác</h2>
                <button className="add-btn" onClick={() => setShowModal(true)}>+ Th√™m l·ªãch m·ªõi</button>
            </div>

            <div className="schedule-grid">
                {schedules.length > 0 ? (
                    schedules.map((s) => <ScheduleCard key={s.id} schedule={s} />)
                ) : (
                    <p>‚ö†Ô∏è Ch∆∞a c√≥ l·ªãch n√†o.</p>
                )}
            </div>

            {showModal && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h3>Th√™m l·ªãch m·ªõi</h3>

                        <label>Lo·∫°i l·ªãch</label>
                        <select
                            value={form.type}
                            onChange={(e) => setForm({ ...form, type: e.target.value })}
                        >
                            <option value="HANG_TUAN">H√†ng tu·∫ßn</option>
                            <option value="HANG_NGAY">H√†ng ng√†y</option>
                        </select>

                        <label>Th·ª© trong tu·∫ßn</label>
                        <select
                            value={form.dayOfWeek}
                            onChange={(e) => setForm({ ...form, dayOfWeek: e.target.value })}
                        >
                            <option value="THU_HAI">Th·ª© 2</option>
                            <option value="THU_BA">Th·ª© 3</option>
                            <option value="THU_TU">Th·ª© 4</option>
                            <option value="THU_NAM">Th·ª© 5</option>
                            <option value="THU_SAU">Th·ª© 6</option>
                            <option value="THU_BAY">Th·ª© 7</option>
                            <option value="CHU_NHAT">Ch·ªß nh·∫≠t</option>
                        </select>

                        <label>Gi·ªù b·∫Øt ƒë·∫ßu</label>
                        <input
                            type="time"
                            value={form.startTime}
                            onChange={(e) => setForm({ ...form, startTime: e.target.value })}
                        />

                        <label>Gi·ªù k·∫øt th√∫c</label>
                        <input
                            type="time"
                            value={form.endTime}
                            onChange={(e) => setForm({ ...form, endTime: e.target.value })}
                        />

                        <label>Gi√° m·ªói bu·ªïi (VND)</label>
                        <input
                            type="number"
                            value={form.price}
                            onChange={(e) => setForm({ ...form, price: parseFloat(e.target.value) })}
                        />

                        <label>Th·ªùi gian m·ªói bu·ªïi (ph√∫t)</label>
                        <input
                            type="number"
                            value={form.durationMinutes}
                            onChange={(e) => setForm({ ...form, durationMinutes: parseInt(e.target.value) })}
                        />

                        <label>Ghi ch√∫</label>
                        <textarea
                            value={form.note}
                            onChange={(e) => setForm({ ...form, note: e.target.value })}
                        />

                        <label>
                            <input
                                type="checkbox"
                                checked={form.isAvailable}
                                onChange={(e) => setForm({ ...form, isAvailable: e.target.checked })}
                            />
                            Cho ph√©p ƒë·∫∑t l·ªãch
                        </label>

                        <div className="modal-actions">
                            <button onClick={() => setShowModal(false)}>‚ùå H·ªßy</button>
                            <button onClick={handleSave}>‚úÖ L∆∞u l·ªãch</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ScheduleSetupPage;
