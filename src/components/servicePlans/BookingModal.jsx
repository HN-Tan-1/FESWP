import React, { useState } from 'react';
import './BookingModal.css';

const BookingModal = ({ service, onClose }) => {
  const [step, setStep] = useState(1);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [contactInfo, setContactInfo] = useState({
    name: '',
    phone: '',
    email: '',
    note: ''
  });

  const [paymentInfo, setPaymentInfo] = useState({
    method: '',
    account: ''
  });

  const availableDates = [
    'Th 2, 07/07', 'Th 3, 08/07', 'Th 4, 09/07', 'Th 5, 10/07',
    'Th 6, 11/07', 'Th 7, 12/07', 'CN, 13/07',
    'Th 2, 14/07', 'Th 3, 15/07', 'Th 4, 16/07', 'Th 5, 17/07',
    'Th 6, 18/07', 'Th 7, 19/07', 'CN, 20/07'
  ];

  const availableTimes = [
    '08:00', '08:30', '09:00', '09:30', '10:00', '10:30',
    '11:00', '11:30', '13:30', '14:00', '14:30', '15:00',
    '15:30', '16:00', '16:30', '17:00'
  ];

  const handleContactChange = (e) => {
    const { name, value } = e.target;
    setContactInfo(prev => ({ ...prev, [name]: value }));
  };

  const handlePaymentChange = (e) => {
    const { name, value } = e.target;
    setPaymentInfo(prev => ({ ...prev, [name]: value }));
  };

  const handleConfirmBooking = () => {
    console.log('‚úÖ Booking info:', {
      service: service,
      selectedDate,
      selectedTime,
      contactInfo
    });
    // Gi·∫£ s·ª≠ g·ªçi API ·ªü ƒë√¢y, sau ƒë√≥ chuy·ªÉn sang thanh to√°n:
    setStep(5);
  };

  const handleCompletePayment = () => {
    console.log('‚úÖ Payment info:', paymentInfo);
    alert('Thanh to√°n th√†nh c√¥ng!');
    onClose();
  };

  return (
    <div className="bm-modal-overlay">
      <div className="bm-modal-content">
        <h2>ƒê·∫∑t l·ªãch d·ªãch v·ª• y t·∫ø</h2>

        <div className="bm-modal-section">
          <h3>{service.title || service.name}</h3>
          <p>Gi√°: {service.price.toLocaleString()}ƒë</p>
          <p>Th·ªùi gian: 15 ph√∫t</p>
        </div>

        {step === 1 && (
          <>
            <h4>üìÖ Ch·ªçn ng√†y kh√°m</h4>
            <div className="bm-options-grid">
              {availableDates.map((date, index) => (
                <button
                  key={index}
                  className={selectedDate === date ? 'bm-selected' : ''}
                  onClick={() => {
                    setSelectedDate(date);
                    setStep(2);
                  }}
                >
                  {date}
                </button>
              ))}
            </div>
          </>
        )}

        {step === 2 && (
          <>
            <h4>‚è∞ Ch·ªçn gi·ªù kh√°m</h4>
            <div className="bm-options-grid">
              {availableTimes.map((time, index) => (
                <button
                  key={index}
                  className={selectedTime === time ? 'bm-selected' : ''}
                  onClick={() => {
                    setSelectedTime(time);
                    setStep(3);
                  }}
                >
                  {time}
                </button>
              ))}
            </div>
          </>
        )}

        {step === 3 && (
          <>
            <h4>üë§ Th√¥ng tin li√™n h·ªá</h4>
            <div className="bm-form-group">
              <label>H·ªç v√† t√™n *</label>
              <input
                type="text"
                name="name"
                value={contactInfo.name}
                onChange={handleContactChange}
                placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
              />
            </div>
            <div className="bm-form-group">
              <label>S·ªë ƒëi·ªán tho·∫°i *</label>
              <input
                type="text"
                name="phone"
                value={contactInfo.phone}
                onChange={handleContactChange}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              />
            </div>
            <div className="bm-form-group">
              <label>Email (tu·ª≥ ch·ªçn)</label>
              <input
                type="email"
                name="email"
                value={contactInfo.email}
                onChange={handleContactChange}
                placeholder="Nh·∫≠p email n·∫øu c·∫ßn"
              />
            </div>
            <div className="bm-form-group">
              <label>Ghi ch√∫ th√™m</label>
              <textarea
                name="note"
                value={contactInfo.note}
                onChange={handleContactChange}
                placeholder="Tri·ªáu ch·ª©ng, c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát..."
              />
            </div>

            <button
              className="bm-next-btn"
              onClick={() => setStep(4)}
              disabled={!contactInfo.name || !contactInfo.phone}
            >
              Ti·∫øp t·ª•c
            </button>
          </>
        )}

        {step === 4 && (
          <>
            <h4>‚úÖ X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch</h4>
            <div className="bm-confirm-box">
              <div>
                <strong>D·ªãch v·ª•:</strong> {service.title || service.name}<br />
                <strong>Gi√°:</strong> {service.price.toLocaleString()}ƒë<br />
                <strong>Th·ªùi gian:</strong> 15 ph√∫t
              </div>
              <div>
                <strong>L·ªãch h·∫πn:</strong><br />
                Ng√†y: {selectedDate}<br />
                Gi·ªù: {selectedTime}
              </div>
              <div>
                <strong>Th√¥ng tin li√™n h·ªá:</strong><br />
                {contactInfo.name} | {contactInfo.phone} | {contactInfo.email}<br />
                {contactInfo.note}
              </div>
            </div>
            <div className="bm-confirm-actions">
              <button className="bm-cancel-btn" onClick={onClose}>Hu·ª∑ b·ªè</button>
              <button className="bm-confirm-btn" onClick={handleConfirmBooking}>X√°c nh·∫≠n ƒë·∫∑t l·ªãch</button>
            </div>
          </>
        )}

        {step === 5 && (
          <>
            <h4>üí≥ Thanh to√°n</h4>
            <div className="bm-form-group">
              <label>Ph∆∞∆°ng th·ª©c thanh to√°n</label>
              <select
                name="method"
                value={paymentInfo.method}
                onChange={handlePaymentChange}
              >
                <option value="">-- Ch·ªçn ph∆∞∆°ng th·ª©c --</option>
                <option value="momo">V√≠ MoMo</option>
                <option value="zalo">V√≠ ZaloPay</option>
                <option value="credit">Th·∫ª t√≠n d·ª•ng</option>
              </select>
            </div>

            <div className="bm-form-group">
              <label>S·ªë th·∫ª / T√†i kho·∫£n v√≠</label>
              <input
                type="text"
                name="account"
                value={paymentInfo.account}
                onChange={handlePaymentChange}
                placeholder="Nh·∫≠p s·ªë th·∫ª ho·∫∑c t√†i kho·∫£n v√≠"
              />
            </div>

            <button
              className="bm-confirm-btn"
              onClick={handleCompletePayment}
              disabled={!paymentInfo.method || !paymentInfo.account}
            >
              Ho√†n t·∫•t thanh to√°n
            </button>
          </>
        )}

        <button className="bm-close-btn" onClick={onClose}>‚úñ</button>
      </div>
    </div>
  );
};

export default BookingModal;
